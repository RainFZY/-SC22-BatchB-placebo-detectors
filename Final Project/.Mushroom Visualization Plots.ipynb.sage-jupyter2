{"backend_state":"init","connection_file":"/projects/01bef9f3-5785-4ee0-b859-e577fbf0d710/.local/share/jupyter/runtime/kernel-bbb37d8c-e258-446e-b015-53d83c968b5f.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"9ba73a","input":"","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e18e0d","input":"","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"a12506","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport warnings \nwarnings.filterwarnings(\"ignore\") ","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"295e15","input":"missing_df = (100*df.isnull().sum()/8124).to_frame()\nmissing_df.columns = ['percentage missing']\nmissing_df.sort_values(by = 'percentage missing')","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>percentage missing</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>class</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>spore-print-color</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>ring-type</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>ring-number</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>veil-color</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>veil-type</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>stalk-color-below-ring</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>stalk-color-above-ring</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>stalk-surface-below-ring</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>stalk-surface-above-ring</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>population</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>habitat</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>gill-color</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>gill-size</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>gill-spacing</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>gill-attachment</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>odor</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>bruises</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>cap-color</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>cap-surface</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>cap-shape</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>stalk-shape</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>stalk-root</th>\n      <td>30.526834</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                          percentage missing\nclass                               0.000000\nspore-print-color                   0.000000\nring-type                           0.000000\nring-number                         0.000000\nveil-color                          0.000000\nveil-type                           0.000000\nstalk-color-below-ring              0.000000\nstalk-color-above-ring              0.000000\nstalk-surface-below-ring            0.000000\nstalk-surface-above-ring            0.000000\npopulation                          0.000000\nhabitat                             0.000000\ngill-color                          0.000000\ngill-size                           0.000000\ngill-spacing                        0.000000\ngill-attachment                     0.000000\nodor                                0.000000\nbruises                             0.000000\ncap-color                           0.000000\ncap-surface                         0.000000\ncap-shape                           0.000000\nstalk-shape                         0.000000\nstalk-root                         30.526834"},"exec_count":10,"output_type":"execute_result"}},"pos":12,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"4760ca","input":"#Make a list of what you want to drop\ncolumns_to_drop = ['stalk-root']\n\n#Drop the columns using drop()\ndf.drop(columns_to_drop, axis=1, inplace = True) #axis = 1 lets pandas know we are dropping columns, not rows.\n\n#Check that they are dropped\ndf.head(1)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>class</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>bruises</th>\n      <th>odor</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-size</th>\n      <th>gill-color</th>\n      <th>stalk-shape</th>\n      <th>stalk-surface-above-ring</th>\n      <th>stalk-surface-below-ring</th>\n      <th>stalk-color-above-ring</th>\n      <th>stalk-color-below-ring</th>\n      <th>veil-type</th>\n      <th>veil-color</th>\n      <th>ring-number</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>population</th>\n      <th>habitat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>p</td>\n      <td>x</td>\n      <td>s</td>\n      <td>n</td>\n      <td>t</td>\n      <td>p</td>\n      <td>f</td>\n      <td>c</td>\n      <td>n</td>\n      <td>k</td>\n      <td>e</td>\n      <td>s</td>\n      <td>s</td>\n      <td>w</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>o</td>\n      <td>p</td>\n      <td>k</td>\n      <td>s</td>\n      <td>u</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  class cap-shape cap-surface cap-color bruises odor gill-attachment  \\\n0     p         x           s         n       t    p               f   \n\n  gill-spacing gill-size gill-color stalk-shape stalk-surface-above-ring  \\\n0            c         n          k           e                        s   \n\n  stalk-surface-below-ring stalk-color-above-ring stalk-color-below-ring  \\\n0                        s                      w                      w   \n\n  veil-type veil-color ring-number ring-type spore-print-color population  \\\n0         p          w           o         p                 k          s   \n\n  habitat  \n0       u  "},"exec_count":11,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"d23061","input":"df.shape","output":{"0":{"data":{"text/plain":"(8124, 22)"},"exec_count":12,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"43be2d","input":"from sklearn.preprocessing import LabelEncoder\n\ndef labelencoder(df):\n    for c in df.columns:\n        if df[c].dtype=='object':\n            df[c] = df[c].fillna('N')\n            lbl = LabelEncoder()\n            lbl.fit(list(df[c].values))\n            df[c] = lbl.transform(df[c].values)\n    return df\n\ndf = labelencoder(df.copy())\n# lbl = LabelEncoder()\n# lbl.fit(list(df['class'].values))\n# df['class'] = lbl.transform(df['class'].values)\n\ndf.head()\n#Converts string values into numeric values","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>class</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>bruises</th>\n      <th>odor</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-size</th>\n      <th>gill-color</th>\n      <th>stalk-shape</th>\n      <th>stalk-surface-above-ring</th>\n      <th>stalk-surface-below-ring</th>\n      <th>stalk-color-above-ring</th>\n      <th>stalk-color-below-ring</th>\n      <th>veil-type</th>\n      <th>veil-color</th>\n      <th>ring-number</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>population</th>\n      <th>habitat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>4</td>\n      <td>1</td>\n      <td>6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>7</td>\n      <td>7</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>5</td>\n      <td>2</td>\n      <td>9</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>7</td>\n      <td>7</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>7</td>\n      <td>7</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>5</td>\n      <td>3</td>\n      <td>8</td>\n      <td>1</td>\n      <td>6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>5</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>7</td>\n      <td>7</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>5</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n      <td>5</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>7</td>\n      <td>7</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   class  cap-shape  cap-surface  cap-color  bruises  odor  gill-attachment  \\\n0      1          5            2          4        1     6                1   \n1      0          5            2          9        1     0                1   \n2      0          0            2          8        1     3                1   \n3      1          5            3          8        1     6                1   \n4      0          5            2          3        0     5                1   \n\n   gill-spacing  gill-size  gill-color  stalk-shape  stalk-surface-above-ring  \\\n0             0          1           4            0                         2   \n1             0          0           4            0                         2   \n2             0          0           5            0                         2   \n3             0          1           5            0                         2   \n4             1          0           4            1                         2   \n\n   stalk-surface-below-ring  stalk-color-above-ring  stalk-color-below-ring  \\\n0                         2                       7                       7   \n1                         2                       7                       7   \n2                         2                       7                       7   \n3                         2                       7                       7   \n4                         2                       7                       7   \n\n   veil-type  veil-color  ring-number  ring-type  spore-print-color  \\\n0          0           2            1          4                  2   \n1          0           2            1          4                  3   \n2          0           2            1          4                  3   \n3          0           2            1          4                  2   \n4          0           2            1          0                  3   \n\n   population  habitat  \n0           3        5  \n1           2        1  \n2           2        3  \n3           3        5  \n4           0        1  "},"exec_count":13,"output_type":"execute_result"}},"pos":18,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"ca7259","input":"px.pie(df, values='class', names='veil-type')","output":{"0":{"data":{"iframe":"cebf85d0598725927af19ea8baa7b6fd7e07a120"},"exec_count":14,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"2aa26b","input":"#Make a list of what you want to drop\ncolumns_to_drop = ['veil-type']\n\n#Drop the columns using drop()\ndf = df.drop(columns_to_drop, axis=1, inplace = False) #axis = 1 lets pandas know we are dropping columns, not rows.\n\n#Check that they are dropped\ndf.head(1)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>class</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>bruises</th>\n      <th>odor</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-size</th>\n      <th>gill-color</th>\n      <th>stalk-shape</th>\n      <th>stalk-surface-above-ring</th>\n      <th>stalk-surface-below-ring</th>\n      <th>stalk-color-above-ring</th>\n      <th>stalk-color-below-ring</th>\n      <th>veil-color</th>\n      <th>ring-number</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>population</th>\n      <th>habitat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>4</td>\n      <td>1</td>\n      <td>6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>7</td>\n      <td>7</td>\n      <td>2</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   class  cap-shape  cap-surface  cap-color  bruises  odor  gill-attachment  \\\n0      1          5            2          4        1     6                1   \n\n   gill-spacing  gill-size  gill-color  stalk-shape  stalk-surface-above-ring  \\\n0             0          1           4            0                         2   \n\n   stalk-surface-below-ring  stalk-color-above-ring  stalk-color-below-ring  \\\n0                         2                       7                       7   \n\n   veil-color  ring-number  ring-type  spore-print-color  population  habitat  \n0           2            1          4                  2           3        5  "},"exec_count":15,"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"e1af6d","input":"from sklearn.preprocessing import StandardScaler\nfrom category_encoders import TargetEncoder\n\ntarget = df['class']\ninput_columns = df.loc[:, df.columns != \"class\"]\n\n# scaler = StandardScaler()\n# x_train = scaler.fit_transform(x_train)\n# x_test = scaler.transform(x_test)\n\nte = TargetEncoder(cols=input_columns.columns).fit(input_columns, target)\ninput_columns = te.transform(input_columns)\n\ninput_columns.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>bruises</th>\n      <th>odor</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-size</th>\n      <th>gill-color</th>\n      <th>stalk-shape</th>\n      <th>stalk-surface-above-ring</th>\n      <th>stalk-surface-below-ring</th>\n      <th>stalk-color-above-ring</th>\n      <th>stalk-color-below-ring</th>\n      <th>veil-color</th>\n      <th>ring-number</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>population</th>\n      <th>habitat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.467177</td>\n      <td>0.552426</td>\n      <td>0.446585</td>\n      <td>0.184834</td>\n      <td>1.000000</td>\n      <td>0.492545</td>\n      <td>0.558426</td>\n      <td>0.885350</td>\n      <td>0.156863</td>\n      <td>0.540387</td>\n      <td>0.296754</td>\n      <td>0.311183</td>\n      <td>0.383513</td>\n      <td>0.383212</td>\n      <td>0.493185</td>\n      <td>0.508547</td>\n      <td>0.205645</td>\n      <td>0.119658</td>\n      <td>0.294872</td>\n      <td>0.739130</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.467177</td>\n      <td>0.552426</td>\n      <td>0.626866</td>\n      <td>0.184834</td>\n      <td>0.000000</td>\n      <td>0.492545</td>\n      <td>0.558426</td>\n      <td>0.301497</td>\n      <td>0.156863</td>\n      <td>0.540387</td>\n      <td>0.296754</td>\n      <td>0.311183</td>\n      <td>0.383513</td>\n      <td>0.383212</td>\n      <td>0.493185</td>\n      <td>0.508547</td>\n      <td>0.205645</td>\n      <td>0.113821</td>\n      <td>0.000000</td>\n      <td>0.344507</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.106195</td>\n      <td>0.552426</td>\n      <td>0.307692</td>\n      <td>0.184834</td>\n      <td>0.000000</td>\n      <td>0.492545</td>\n      <td>0.558426</td>\n      <td>0.301497</td>\n      <td>0.106870</td>\n      <td>0.540387</td>\n      <td>0.296754</td>\n      <td>0.311183</td>\n      <td>0.383513</td>\n      <td>0.383212</td>\n      <td>0.493185</td>\n      <td>0.508547</td>\n      <td>0.205645</td>\n      <td>0.113821</td>\n      <td>0.000000</td>\n      <td>0.123288</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.467177</td>\n      <td>0.536375</td>\n      <td>0.307692</td>\n      <td>0.184834</td>\n      <td>1.000000</td>\n      <td>0.492545</td>\n      <td>0.558426</td>\n      <td>0.885350</td>\n      <td>0.106870</td>\n      <td>0.540387</td>\n      <td>0.296754</td>\n      <td>0.311183</td>\n      <td>0.383513</td>\n      <td>0.383212</td>\n      <td>0.493185</td>\n      <td>0.508547</td>\n      <td>0.205645</td>\n      <td>0.119658</td>\n      <td>0.294872</td>\n      <td>0.739130</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.467177</td>\n      <td>0.552426</td>\n      <td>0.439130</td>\n      <td>0.693345</td>\n      <td>0.034014</td>\n      <td>0.492545</td>\n      <td>0.085366</td>\n      <td>0.301497</td>\n      <td>0.156863</td>\n      <td>0.437500</td>\n      <td>0.296754</td>\n      <td>0.311183</td>\n      <td>0.383513</td>\n      <td>0.383212</td>\n      <td>0.493185</td>\n      <td>0.508547</td>\n      <td>0.636888</td>\n      <td>0.113821</td>\n      <td>0.000000</td>\n      <td>0.344507</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   cap-shape  cap-surface  cap-color   bruises      odor  gill-attachment  \\\n0   0.467177     0.552426   0.446585  0.184834  1.000000         0.492545   \n1   0.467177     0.552426   0.626866  0.184834  0.000000         0.492545   \n2   0.106195     0.552426   0.307692  0.184834  0.000000         0.492545   \n3   0.467177     0.536375   0.307692  0.184834  1.000000         0.492545   \n4   0.467177     0.552426   0.439130  0.693345  0.034014         0.492545   \n\n   gill-spacing  gill-size  gill-color  stalk-shape  stalk-surface-above-ring  \\\n0      0.558426   0.885350    0.156863     0.540387                  0.296754   \n1      0.558426   0.301497    0.156863     0.540387                  0.296754   \n2      0.558426   0.301497    0.106870     0.540387                  0.296754   \n3      0.558426   0.885350    0.106870     0.540387                  0.296754   \n4      0.085366   0.301497    0.156863     0.437500                  0.296754   \n\n   stalk-surface-below-ring  stalk-color-above-ring  stalk-color-below-ring  \\\n0                  0.311183                0.383513                0.383212   \n1                  0.311183                0.383513                0.383212   \n2                  0.311183                0.383513                0.383212   \n3                  0.311183                0.383513                0.383212   \n4                  0.311183                0.383513                0.383212   \n\n   veil-color  ring-number  ring-type  spore-print-color  population   habitat  \n0    0.493185     0.508547   0.205645           0.119658    0.294872  0.739130  \n1    0.493185     0.508547   0.205645           0.113821    0.000000  0.344507  \n2    0.493185     0.508547   0.205645           0.113821    0.000000  0.123288  \n3    0.493185     0.508547   0.205645           0.119658    0.294872  0.739130  \n4    0.493185     0.508547   0.636888           0.113821    0.000000  0.344507  "},"exec_count":16,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"3977ee","input":"input_columns.columns","output":{"0":{"data":{"text/plain":"Index(['cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor',\n       'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',\n       'stalk-shape', 'stalk-surface-above-ring', 'stalk-surface-below-ring',\n       'stalk-color-above-ring', 'stalk-color-below-ring', 'veil-color',\n       'ring-number', 'ring-type', 'spore-print-color', 'population',\n       'habitat'],\n      dtype='object')"},"exec_count":17,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"5bf59e","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"b9b53f","input":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","output":{"0":{"name":"stdout","output_type":"stream","text":"(6499, 20)\n(1625, 20)\n(6499,)\n(1625,)\n"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"f75d57","input":"df = pd.read_csv(\"./mushrooms_Lucas.csv\")\n#There are many missing values in stalk root, 31% rows have missing values\npd.set_option('display.max_columns', None)\ndf.head()\n#Table of all features and values","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>class</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>bruises</th>\n      <th>odor</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-size</th>\n      <th>gill-color</th>\n      <th>stalk-shape</th>\n      <th>stalk-root</th>\n      <th>stalk-surface-above-ring</th>\n      <th>stalk-surface-below-ring</th>\n      <th>stalk-color-above-ring</th>\n      <th>stalk-color-below-ring</th>\n      <th>veil-type</th>\n      <th>veil-color</th>\n      <th>ring-number</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>population</th>\n      <th>habitat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>p</td>\n      <td>x</td>\n      <td>s</td>\n      <td>n</td>\n      <td>t</td>\n      <td>p</td>\n      <td>f</td>\n      <td>c</td>\n      <td>n</td>\n      <td>k</td>\n      <td>e</td>\n      <td>e</td>\n      <td>s</td>\n      <td>s</td>\n      <td>w</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>o</td>\n      <td>p</td>\n      <td>k</td>\n      <td>s</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>e</td>\n      <td>x</td>\n      <td>s</td>\n      <td>y</td>\n      <td>t</td>\n      <td>a</td>\n      <td>f</td>\n      <td>c</td>\n      <td>b</td>\n      <td>k</td>\n      <td>e</td>\n      <td>c</td>\n      <td>s</td>\n      <td>s</td>\n      <td>w</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>o</td>\n      <td>p</td>\n      <td>n</td>\n      <td>n</td>\n      <td>g</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>e</td>\n      <td>b</td>\n      <td>s</td>\n      <td>w</td>\n      <td>t</td>\n      <td>l</td>\n      <td>f</td>\n      <td>c</td>\n      <td>b</td>\n      <td>n</td>\n      <td>e</td>\n      <td>c</td>\n      <td>s</td>\n      <td>s</td>\n      <td>w</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>o</td>\n      <td>p</td>\n      <td>n</td>\n      <td>n</td>\n      <td>m</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>p</td>\n      <td>x</td>\n      <td>y</td>\n      <td>w</td>\n      <td>t</td>\n      <td>p</td>\n      <td>f</td>\n      <td>c</td>\n      <td>n</td>\n      <td>n</td>\n      <td>e</td>\n      <td>e</td>\n      <td>s</td>\n      <td>s</td>\n      <td>w</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>o</td>\n      <td>p</td>\n      <td>k</td>\n      <td>s</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>e</td>\n      <td>x</td>\n      <td>s</td>\n      <td>g</td>\n      <td>f</td>\n      <td>n</td>\n      <td>f</td>\n      <td>w</td>\n      <td>b</td>\n      <td>k</td>\n      <td>t</td>\n      <td>e</td>\n      <td>s</td>\n      <td>s</td>\n      <td>w</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>o</td>\n      <td>e</td>\n      <td>n</td>\n      <td>a</td>\n      <td>g</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  class cap-shape cap-surface cap-color bruises odor gill-attachment  \\\n0     p         x           s         n       t    p               f   \n1     e         x           s         y       t    a               f   \n2     e         b           s         w       t    l               f   \n3     p         x           y         w       t    p               f   \n4     e         x           s         g       f    n               f   \n\n  gill-spacing gill-size gill-color stalk-shape stalk-root  \\\n0            c         n          k           e          e   \n1            c         b          k           e          c   \n2            c         b          n           e          c   \n3            c         n          n           e          e   \n4            w         b          k           t          e   \n\n  stalk-surface-above-ring stalk-surface-below-ring stalk-color-above-ring  \\\n0                        s                        s                      w   \n1                        s                        s                      w   \n2                        s                        s                      w   \n3                        s                        s                      w   \n4                        s                        s                      w   \n\n  stalk-color-below-ring veil-type veil-color ring-number ring-type  \\\n0                      w         p          w           o         p   \n1                      w         p          w           o         p   \n2                      w         p          w           o         p   \n3                      w         p          w           o         p   \n4                      w         p          w           o         e   \n\n  spore-print-color population habitat  \n0                 k          s       u  \n1                 n          n       g  \n2                 n          n       m  \n3                 k          s       u  \n4                 n          a       g  "},"exec_count":2,"output_type":"execute_result"}},"pos":2,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"0404da","input":"#px.bar(df, x = \"cap-color\", y = \"class\", barmode = \"group\", color = 'class', height = 400)\n#Don't use bar graphs unless y is small amount of rows, use histogram or pie chart instead","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"ab4dfa","input":"fig = px.histogram(df, x=\"cap-color\", color='class', title = 'Proportion of poisonous to palatable mushrooms organized by cap-colour',\n                  color_discrete_map = {0:'#B99C6B',1:'#404F24'})\nfig.show()\nfig.write_html('./Webpage/assets/img/histogram1.html')","output":{"0":{"data":{"iframe":"86a6ad9c7e2bef8970a6bddd6c81247dcadc094e"},"exec_count":21,"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"9fca3f","input":"fig = px.histogram(df, x=\"population\", color='class', title = 'Proportion of poisonous to palatable mushrooms organized by population type',\n                  color_discrete_map = {0:'#B99C6B',1:'#404F24'})\nfig.show()","output":{"0":{"data":{"iframe":"3bb51aaf0d4a0a0ec149012bbde89eb1e1b8440c"},"exec_count":22,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"168779","input":"df_matrix = df[['cap-shape','cap-surface','cap-color','bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','class']]\nfig = px.scatter_matrix(df_matrix, color = 'class', color_continuous_scale=px.colors.sequential.Bluered,)\nfig.update_layout(width=1200, height=1200)\nfig.show()\n#pleas don't break\n#shows what features mushrooms will usually contain and what combinations won't normally be seen?","output":{"0":{"data":{"iframe":"6603d4a5ce4411f7068532844bcbd4215d4db420"},"exec_count":23,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"d8bf67","input":"fig = px.histogram(df, x=\"odor\", color='class', title = 'Proportion of poisonous to palatable mushrooms organized by odor',\n                  color_discrete_map = {0:'#B99C6B',1:'#404F24'})\nfig.show()\n#shows a very strong correlation between mushroom odor and palatability","output":{"0":{"data":{"iframe":"49ef966e7a3586ed8dd94394a7cf65e9be80d7a4"},"exec_count":24,"output_type":"execute_result"}},"pos":35,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"61ea8c","input":"df_matrix = df[['stalk-surface-above-ring','stalk-surface-below-ring','veil-color','ring-number','ring-type','spore-print-color','population','habitat', 'class']]\nfig = px.scatter_matrix(df_matrix, color = 'class')\nfig.show()\n#the error was that there were two 'stalk-surface-above-ring','stalk-surface-below-ring' in the list btw","output":{"0":{"data":{"iframe":"1277fec1e5ff616e2974ded344066c3f13dc1d69"},"exec_count":25,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"f10217","input":"px.pie(df, values='class', names='gill-spacing',title = 'Percentage of poisonous mushrooms of a specific gill-spacing', color_discrete_sequence=px.colors.sequential.Brwnyl)\n#first need to change to numeric values\n#only shows poisonous mushrooms and which ones have more poisonous mushrooms ","output":{"0":{"data":{"iframe":"e5556190f0bf30f874d5f4bb71ad66aae4e714a1"},"exec_count":26,"output_type":"execute_result"}},"pos":37,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"a6dd9c","input":"df_temp = df.drop(df[df.bruises != 0].index) #removes all rows without value of 0 in column bruises\ndf_temp['placeholder'] = 1 #placeholder of 1s to use for making a pie chart\npx.pie(df_temp, values = 'placeholder', names = \"class\", title = 'Percentage of poisonous to palatable brown cap colour mushrooms', color_discrete_sequence=px.colors.sequential.Brwnyl)\n#is it possible to create these pie charts using variables instead so we don't have to maunually write this out every time","output":{"0":{"data":{"iframe":"cfe26078e866753349bf50268cff22bd637e62a7"},"exec_count":27,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"b30b94","input":"import plotly.figure_factory as ff\n\ndf_corr = df.corr() # Generate correlation matrix\n\n\nx = list(df_corr.columns)\ny = list(df_corr.index)\nz = np.array(df_corr)\n\nfig = ff.create_annotated_heatmap(\n    z,\n    x = x,\n    y = y ,\n    annotation_text = np.around(z, decimals=2),\n    hoverinfo='z',\n    colorscale='Brwnyl',\n    showscale=True,\n    )\nfig.update_xaxes(side=\"bottom\")\nfig.update_layout(\n    # title_text='Heatmap', \n    title_x=0.5, \n    width=1000, \n    height=1000,\n    yaxis_autorange='reversed',\n    template='plotly_white'\n)\nfig.write_html(\"./images/heatmap.html\")\nfig.show()\n","output":{"0":{"data":{"iframe":"3cdb0460b2c984f367e484e5e396b62da374c514"},"exec_count":28,"output_type":"execute_result"}},"pos":43,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"9a99ce","input":"px.scatter(df ,x = \"gill-attachment\", y = \"veil-color\", color = \"class\")\n# If stalk surface above ring is 1 then it seems to always be poisonous","output":{"0":{"data":{"iframe":"da04af0a579bd02f0be55f4844d9d0e7a9d09b12"},"exec_count":29,"output_type":"execute_result"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"c21569","input":"df['stalk-color-above-ring'].value_counts()","output":{"0":{"data":{"text/plain":"w    4464\np    1872\ng     576\nn     448\nb     432\no     192\ne      96\nc      36\ny       8\nName: stalk-color-above-ring, dtype: int64"},"exec_count":3,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"23af57","input":"import plotly.graph_objects as go\nimport numpy as np\nnp.random.seed(1)\n\nN = 70\n\nfig = go.Figure(data=[go.Mesh3d(x=(df['cap-color']),\n                   y=(df['stalk-color-above-ring']),\n                   z=(df['gill-color']),\n                   opacity=0.5,\n                   color='rgba(244,22,100,0.6)'\n                  )])\n\n# fig.update_layout(\n#     scene = dict(\n#         xaxis = dict(nticks=4, range=[-100,100],),\n#                      yaxis = dict(nticks=4, range=[-50,100],),\n#                      zaxis = dict(nticks=4, range=[-100,100],),),\n#     width=700,\n#     margin=dict(r=20, l=10, b=10, t=10))\n\nfig.show()","output":{"0":{"data":{"iframe":"af21f949f9e5abcacda213a080134f3137352ca6"},"exec_count":30,"output_type":"execute_result"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"21a3a3","input":"import sklearn #our favorite machine learning library\nfrom sklearn.neighbors import KNeighborsClassifier as KNN #this will import our model as KNN","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"c9f0c1","input":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nknn = KNeighborsClassifier()\nparam_grid = {'n_neighbors':list(range(1, 21))}\n# defining parameter range\ngrid = GridSearchCV(knn, param_grid, cv=10, scoring='accuracy', return_train_score=False,verbose=1)\n  \n# fitting the model for grid search\ngrid_search=grid.fit(x_train, y_train)","output":{"0":{"name":"stdout","output_type":"stream","text":"Fitting 10 folds for each of 20 candidates, totalling 200 fits\n"}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"0f2686","input":"print(grid_search.best_params_)","output":{"0":{"name":"stdout","output_type":"stream","text":"{'n_neighbors': 1}\n"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"e534c1","input":"accuracy = grid_search.best_score_ *100\nprint(\"Accuracy for our training dataset with tuning is : {:.2f}%\".format(accuracy) )","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy for our training dataset with tuning is : 100.00%\n"}},"pos":52,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"2613eb","input":"# best_knn = grid_search.best_estimator_\n# feat_imps = zip(input_columns, best_knn.feature_importances_)\n# print(feat_imps)\n# ax = sns.barplot(list(feats), list(imps))\n# ax.tick_params(axis='x', rotation=90)\n# print('Top 3 most important features from the trained XGBoost model:', feats[:3])","pos":53,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"85a00d","input":"k = 100\nmy_KNN_model = KNN(n_neighbors=k)\nmy_KNN_model.fit(x_train, y_train)\ny_hat = my_KNN_model.predict(x_test)","pos":55,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"234b91","input":"import pickle\n\nfilename = 'knn.sav'\npickle.dump(my_KNN_model, open(filename, 'wb'))","pos":56,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"5e669f","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","output":{"0":{"name":"stdout","output_type":"stream","text":"0.004923076923076923\n"}},"pos":57,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"9d6286","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\ncm = sns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')\nfig = cm.get_figure()\n# fig.savefig(\"./images/cm_KNN.png\") ","output":{"0":{"data":{"image/png":"787a23bb978a36c13260a3291b4db54af587d253","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":39,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"344b85","input":"df.columns","output":{"0":{"data":{"text/plain":"Index(['class', 'cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor',\n       'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',\n       'stalk-shape', 'stalk-root', 'stalk-surface-above-ring',\n       'stalk-surface-below-ring', 'stalk-color-above-ring',\n       'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number',\n       'ring-type', 'spore-print-color', 'population', 'habitat'],\n      dtype='object')"},"exec_count":4,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"ba76f6","input":"from sklearn import metrics\nfrom sklearn.metrics import recall_score,precision_score,f1_score\n\nprint(\"accuracy on test set::\",metrics.accuracy_score(y_test, y_hat))\nprint(\"recall on test set:\", recall_score(y_test, y_hat, pos_label=1))\nprint(\"precision on test set:\", precision_score(y_test, y_hat, pos_label=1))\nprint(\"F1-score on test set:\", f1_score(y_test, y_hat, pos_label=1))","output":{"0":{"name":"stdout","output_type":"stream","text":"accuracy on test set:: 0.992\nrecall on test set: 0.9833119383825417\nprecision on test set: 1.0\nF1-score on test set: 0.9915857605177993\n"}},"pos":59,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"6f0fe0","input":"from sklearn.metrics import PrecisionRecallDisplay\ndisplay = PrecisionRecallDisplay.from_estimator(my_KNN_model, x_test, y_test, name=\"KNN\")\n_ = display.ax_.set_title(\"Precision-Recall curve for KNN\")","output":{"0":{"data":{"image/png":"4ce6abaab5aea9da802a0057a8b2251b9c7dd239","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":41,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":60,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"dd2387","input":"import matplotlib.pyplot as plt\nfrom sklearn.metrics import plot_roc_curve\nfig, axes = plt.subplots(nrows=1, ncols=1, figsize=(10,6))\nfig.suptitle('ROC Curve for KNN')\nplot_roc_curve(my_KNN_model, x_test, y_test, ax=axes)\nplt.show()","output":{"0":{"data":{"image/png":"e986d8a248c4a7b60bf56cb179195a1969cc89f6","text/plain":"<Figure size 720x432 with 1 Axes>"},"exec_count":42,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":61,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"f6db35","input":"# my_data = []\n# for col in input_columns.columns:\n#     user_input = input(\"Input \" + col + \" here: \")\n#     my_data.append(float(user_input))\n\n# my_data = np.array(my_data)\n# my_data = my_data.reshape(1,20)\n\n# res = my_KNN_model.predict(my_data)\n# print(\"The prediction is: \", res[0]) ","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Input cap-shape here: "},"output_type":"stream","value":"1"},"1":{"name":"input","opts":{"password":false,"prompt":"Input cap-surface here: "},"output_type":"stream","value":"1"},"10":{"name":"input","opts":{"password":false,"prompt":"Input stalk-surface-above-ring here: "},"output_type":"stream","value":"1"},"11":{"name":"input","opts":{"password":false,"prompt":"Input stalk-surface-below-ring here: "},"output_type":"stream","value":"1"},"12":{"name":"input","opts":{"password":false,"prompt":"Input stalk-color-above-ring here: "},"output_type":"stream","value":"1"},"13":{"name":"input","opts":{"password":false,"prompt":"Input stalk-color-below-ring here: "},"output_type":"stream","value":"1"},"14":{"name":"input","opts":{"password":false,"prompt":"Input veil-color here: "},"output_type":"stream","value":"1"},"15":{"name":"input","opts":{"password":false,"prompt":"Input ring-number here: "},"output_type":"stream","value":"1"},"16":{"name":"input","opts":{"password":false,"prompt":"Input ring-type here: "},"output_type":"stream","value":"0"},"17":{"name":"input","opts":{"password":false,"prompt":"Input spore-print-color here: "},"output_type":"stream","value":"1"},"18":{"name":"input","opts":{"password":false,"prompt":"Input population here: "},"output_type":"stream","value":"1"},"19":{"name":"input","opts":{"password":false,"prompt":"Input habitat here: "},"output_type":"stream","value":"1"},"2":{"name":"input","opts":{"password":false,"prompt":"Input cap-color here: "},"output_type":"stream","value":"1"},"3":{"name":"input","opts":{"password":false,"prompt":"Input bruises here: "},"output_type":"stream","value":"1"},"4":{"name":"input","opts":{"password":false,"prompt":"Input odor here: "},"output_type":"stream","value":"1"},"5":{"name":"input","opts":{"password":false,"prompt":"Input gill-attachment here: "},"output_type":"stream","value":"0"},"6":{"name":"input","opts":{"password":false,"prompt":"Input gill-spacing here: "},"output_type":"stream","value":"1"},"7":{"name":"input","opts":{"password":false,"prompt":"Input gill-size here: "},"output_type":"stream","value":"0"},"8":{"name":"input","opts":{"password":false,"prompt":"Input gill-color here: "},"output_type":"stream","value":"1"},"9":{"name":"input","opts":{"password":false,"prompt":"Input stalk-shape here: "},"output_type":"stream","value":"0"}}}},"pos":64,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"d756c8","input":"from sklearn.svm import SVC\nclf = SVC()","pos":66,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"b1301f","input":"clf.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div>","text/plain":"SVC()"},"exec_count":46,"output_type":"execute_result"}},"pos":67,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"df1acd","input":"y_hat = clf.predict(x_test)\ny_hat","output":{"0":{"data":{"text/plain":"array([0, 1, 0, ..., 1, 0, 1])"},"exec_count":47,"output_type":"execute_result"}},"pos":68,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"26b8f6","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","output":{"0":{"name":"stdout","output_type":"stream","text":"0.0\n"}},"pos":69,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"17fe10","input":"fig = sns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')\nfig = fig.get_figure()\nfig.savefig(\"./images/confusion_perf.png\") ","output":{"0":{"data":{"image/png":"ee736a7aa41daab53da79cce5f6b0621cae1d41c","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":49,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":70,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"08cbb6","input":"df.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 8124 entries, 0 to 8123\nData columns (total 23 columns):\n #   Column                    Non-Null Count  Dtype \n---  ------                    --------------  ----- \n 0   class                     8124 non-null   object\n 1   cap-shape                 8124 non-null   object\n 2   cap-surface               8124 non-null   object\n 3   cap-color                 8124 non-null   object\n 4   bruises                   8124 non-null   object\n 5   odor                      8124 non-null   object\n 6   gill-attachment           8124 non-null   object\n 7   gill-spacing              8124 non-null   object\n 8   gill-size                 8124 non-null   object\n 9   gill-color                8124 non-null   object\n 10  stalk-shape               8124 non-null   object\n 11  stalk-root                8124 non-null   object\n 12  stalk-surface-above-ring  8124 non-null   object\n 13  stalk-surface-below-ring  8124 non-null   object\n 14  stalk-color-above-ring    8124 non-null   object\n 15  stalk-color-below-ring    8124 non-null   object\n 16  veil-type                 8124 non-null   object\n 17  veil-color                8124 non-null   object\n 18  ring-number               8124 non-null   object\n 19  ring-type                 8124 non-null   object\n 20  spore-print-color         8124 non-null   object\n 21  population                8124 non-null   object\n 22  habitat                   8124 non-null   object\ndtypes: object(23)\nmemory usage: 1.4+ MB\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"cef19a","input":"my_SVC_model = SVC()\nparameters = {'C': [0.1, 0.5, 1, 5, 10, 15, 20, 30]}\nclf = GridSearchCV(my_SVC_model, parameters)\nclf.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=SVC(),\n             param_grid={&#x27;C&#x27;: [0.1, 0.5, 1, 5, 10, 15, 20, 30]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=SVC(),\n             param_grid={&#x27;C&#x27;: [0.1, 0.5, 1, 5, 10, 15, 20, 30]})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=SVC(),\n             param_grid={'C': [0.1, 0.5, 1, 5, 10, 15, 20, 30]})"},"exec_count":50,"output_type":"execute_result"}},"pos":71,"type":"cell"}
{"cell_type":"code","exec_count":51,"id":"ec0ff5","input":"print(clf.best_params_)","output":{"0":{"name":"stdout","output_type":"stream","text":"{'C': 5}\n"}},"pos":72,"type":"cell"}
{"cell_type":"code","exec_count":52,"id":"9650f4","input":"display = PrecisionRecallDisplay.from_estimator(clf, x_test, y_test, name=\"SVC\")\npr_curve = display.ax_.set_title(\"Precision-Recall curve for SVC\")\nplt.savefig('./images/pr_curve.png')","output":{"0":{"data":{"image/png":"e5197d36441082529d17845f173b5e3d39a784a1","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":52,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":73,"type":"cell"}
{"cell_type":"code","exec_count":53,"id":"b8e2ec","input":"fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(10,6))\nfig.suptitle('ROC Curve for SVC')\nplot_roc_curve(clf, x_test, y_test, ax=axes)\nplt.show()\nplt.savefig('./images/roc_curve.png')","output":{"0":{"data":{"image/png":"643b7afeea28bc1015803e43fb6466f395743b77","text/plain":"<Figure size 720x432 with 1 Axes>"},"exec_count":53,"metadata":{"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"text/plain":"<Figure size 432x288 with 0 Axes>"},"exec_count":53,"output_type":"execute_result"}},"pos":74,"type":"cell"}
{"cell_type":"code","exec_count":54,"id":"5548ef","input":"from sklearn.inspection import permutation_importance\nperm_importance = permutation_importance(clf, x_test, y_test)\n\nfeature_names = ['cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor',\n       'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',\n       'stalk-shape', 'stalk-surface-above-ring',\n       'stalk-surface-below-ring', 'stalk-color-above-ring',\n       'stalk-color-below-ring', 'veil-color', 'ring-number',\n       'ring-type', 'spore-print-color', 'population', 'habitat']\nfeatures = np.array(feature_names)\n\nsorted_idx = perm_importance.importances_mean.argsort()\nplt.barh(features[sorted_idx], perm_importance.importances_mean[sorted_idx])\nplt.xlabel(\"Permutation Importance\")\nplt.savefig('./images/feat_imps.png')","output":{"0":{"data":{"image/png":"9513e379dfb3cad19e966184a3185961a8af0045","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":54,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":75,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"179352","input":"len(df)","output":{"0":{"data":{"text/plain":"8124"},"exec_count":6,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":62,"id":"ecd52c","input":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns","pos":78,"type":"cell"}
{"cell_type":"code","exec_count":63,"id":"5293aa","input":"rf_model = RandomForestClassifier(n_estimators = 100)\nrf_model.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>","text/plain":"RandomForestClassifier()"},"exec_count":63,"output_type":"execute_result"}},"pos":79,"type":"cell"}
{"cell_type":"code","exec_count":64,"id":"94676b","input":"y_hat = rf_model.predict(x_test)\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')\ntotal_squared_error = (np.sum((y_test - y_hat)**2)) \nmean_squared_error = total_squared_error/len(y_test) \nprint(mean_squared_error)","output":{"0":{"name":"stdout","output_type":"stream","text":"0.0\n"},"1":{"data":{"image/png":"ee736a7aa41daab53da79cce5f6b0621cae1d41c","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":64,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":80,"type":"cell"}
{"cell_type":"code","exec_count":65,"id":"5a84d0","input":"from sklearn.model_selection import GridSearchCV\nrf_model = RandomForestClassifier()\nparams = {\n    'n_estimators' : [50, 100, 150]\n}\nCV_rf = GridSearchCV(rf_model, params)\nCV_rf.fit(x_train, y_train)\nprint(CV_rf.best_params_)","output":{"0":{"name":"stdout","output_type":"stream","text":"{'n_estimators': 50}\n"}},"pos":81,"type":"cell"}
{"cell_type":"code","exec_count":66,"id":"e00e23","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ny_hat = CV_rf.predict(x_test)\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":66,"output_type":"execute_result"},"1":{"data":{"image/png":"ee736a7aa41daab53da79cce5f6b0621cae1d41c","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":66,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":82,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"b3e70f","input":"display = PrecisionRecallDisplay.from_estimator(clf, x_test, y_test, name=\"Random Forest\")\n_ = display.ax_.set_title(\"Precision-Recall curve for Random Forest\")","output":{"0":{"data":{"image/png":"a4fe1c682619ccae1968504174db294814e773d0","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":67,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":83,"type":"cell"}
{"cell_type":"code","exec_count":68,"id":"9957a1","input":"fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(10,6))\nfig.suptitle('ROC Curve for Random Forest')\nplot_roc_curve(clf, x_test, y_test, ax=axes)\nplt.show()","output":{"0":{"data":{"image/png":"beba83bec45de66f6430fdfb01462f9bd1170439","text/plain":"<Figure size 720x432 with 1 Axes>"},"exec_count":68,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":84,"type":"cell"}
{"cell_type":"code","exec_count":69,"id":"fc48b6","input":"# shows visualization of any single tree in forest. to change tree change the number in the rf_model.estimators brackets.\nrf_model = RandomForestClassifier(n_estimators = 100)\nrf_model.fit(x_train, y_train)\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import export_graphviz\nestimator = rf_model.estimators_[1]\nexport_graphviz(estimator, out_file = 'tree.dot', feature_names = x_train.columns, class_names = 'class', rounded = True, proportion = False, precision = 2, filled = True)\nfrom subprocess import call\ncall(['dot','-Tpng', 'tree.dot', '-o', 'tree.png', '-Gdpi=600'])\nfrom IPython.display import Image\nImage(filename = './images/tree.png')","output":{"0":{"data":{"image/png":"3521b1155a30726e2a3aaa89fd53486b8d025f5e","text/plain":"<IPython.core.display.Image object>"},"exec_count":69,"output_type":"execute_result"}},"pos":85,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"0b5145","input":"df['ring-type'].value_counts()","output":{"0":{"data":{"text/plain":"p    3968\ne    2776\nl    1296\nf      48\nn      36\nName: ring-type, dtype: int64"},"exec_count":7,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":70,"id":"ade78c","input":"X = df[['cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor',\n       'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',\n       'stalk-shape', 'stalk-surface-above-ring',\n       'stalk-surface-below-ring', 'stalk-color-above-ring',\n       'stalk-color-below-ring', 'veil-color', 'ring-number',\n       'ring-type', 'spore-print-color', 'population', 'habitat']]\n\n(pd.Series(rf_model.feature_importances_, index=X.columns)\n   .nlargest(20)\n   .plot(kind='barh')) \n#","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":70,"output_type":"execute_result"},"1":{"data":{"image/png":"e8583220517d67c39711e1cf145e0d1f78c34b92","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":70,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":86,"type":"cell"}
{"cell_type":"code","exec_count":71,"id":"1c8ac6","input":"from sklearn.neural_network import MLPClassifier as MLPC","pos":88,"type":"cell"}
{"cell_type":"code","exec_count":72,"id":"4a800f","input":"my_MLPC_model = MLPC() #Default for hidden layer size is (100,)\nmy_MLPC_model.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MLPClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MLPClassifier</label><div class=\"sk-toggleable__content\"><pre>MLPClassifier()</pre></div></div></div></div></div>","text/plain":"MLPClassifier()"},"exec_count":72,"output_type":"execute_result"}},"pos":89,"type":"cell"}
{"cell_type":"code","exec_count":73,"id":"e82805","input":"y_hat = my_MLPC_model.predict(x_test)\ntotal_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","output":{"0":{"name":"stdout","output_type":"stream","text":"0.0\n"}},"pos":90,"type":"cell"}
{"cell_type":"code","exec_count":74,"id":"e07eb1","input":"sns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":74,"output_type":"execute_result"},"1":{"data":{"image/png":"ee736a7aa41daab53da79cce5f6b0621cae1d41c","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":74,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":91,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":75,"id":"25bb28","input":"parameters = {'hidden_layer_sizes': [(20,), (40,), (60,), (80,), (100,)]}\nclf = GridSearchCV(my_MLPC_model, parameters)\nclf.fit(x_train, y_train) #takes a long time","output":{"0":{"data":{"text/html":"<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=MLPClassifier(),\n             param_grid={&#x27;hidden_layer_sizes&#x27;: [(20,), (40,), (60,), (80,),\n                                                (100,)]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=MLPClassifier(),\n             param_grid={&#x27;hidden_layer_sizes&#x27;: [(20,), (40,), (60,), (80,),\n                                                (100,)]})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: MLPClassifier</label><div class=\"sk-toggleable__content\"><pre>MLPClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MLPClassifier</label><div class=\"sk-toggleable__content\"><pre>MLPClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=MLPClassifier(),\n             param_grid={'hidden_layer_sizes': [(20,), (40,), (60,), (80,),\n                                                (100,)]})"},"exec_count":75,"output_type":"execute_result"}},"pos":92,"type":"cell"}
{"cell_type":"code","exec_count":76,"id":"fe048c","input":"print(clf.best_params_)","output":{"0":{"name":"stdout","output_type":"stream","text":"{'hidden_layer_sizes': (20,)}\n"}},"pos":93,"type":"cell"}
{"cell_type":"code","exec_count":77,"id":"8bbc29","input":"y_hat = my_MLPC_model.predict(x_test)\ntotal_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","output":{"0":{"name":"stdout","output_type":"stream","text":"0.0\n"}},"pos":94,"type":"cell"}
{"cell_type":"code","exec_count":78,"id":"a2979c","input":"sns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":78,"output_type":"execute_result"},"1":{"data":{"image/png":"ee736a7aa41daab53da79cce5f6b0621cae1d41c","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":78,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":95,"type":"cell"}
{"cell_type":"code","exec_count":79,"id":"95d96e","input":"display = PrecisionRecallDisplay.from_estimator(my_MLPC_model, x_test, y_test, name=\"Neural Network\")\n_ = display.ax_.set_title(\"2-class Precision-Recall curve\") #error is too small to be noticed on the graph?","output":{"0":{"data":{"image/png":"7ad091ba86beea1cae9e373bfebb9bc528f0349b","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":79,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":96,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"95590f","input":"df['stalk-root'].value_counts()","output":{"0":{"data":{"text/plain":"b    3776\n?    2480\ne    1120\nc     556\nr     192\nName: stalk-root, dtype: int64"},"exec_count":8,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":81,"id":"6bcb2f","input":"from sklearn.metrics import accuracy_score\n\ndef get_feature_importance(j, n):\n  s = accuracy_score(y_test, y_hat) # baseline score\n  total = 0.0\n  for i in range(n):\n    perm = np.random.permutation(range(x_test.shape[0]))\n    x_test_ = x_test.copy()\n    x_test_[:, j] = x_test[perm, j]\n    y_hat_ = clf.predict(x_test_)\n    s_ij = accuracy_score(y_test, y_hat_)\n    total += s_ij\n  return s - total / n\n","pos":98,"type":"cell"}
{"cell_type":"code","exec_count":82,"id":"d07413","input":"x_test.shape[1]","output":{"0":{"data":{"text/plain":"20"},"exec_count":82,"output_type":"execute_result"}},"pos":99,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"8cdef2","input":"# f = []\n# for j in range(x_test.shape[1]):\n#   f_j = get_feature_importance(j, 100)\n#   f.append(f_j)\n\n# plt.figure(figsize=(10, 5))\n# plt.bar(range(x_test.shape[1]), f, color=\"r\", alpha=0.7)\n# plt.xticks(ticks=range(x_test.shape[1]))\n# plt.xlabel(\"Feature\")\n# plt.ylabel(\"Importance\")\n# plt.title(\"Feature importances (Iris data set)\")\n# plt.show()","pos":100,"type":"cell"}
{"cell_type":"code","exec_count":84,"id":"27eda0","input":"from sklearn.tree import DecisionTreeClassifier, plot_tree\nmodel = DecisionTreeClassifier(max_depth=3, random_state=100)\nprint(type(model))\n\nmodel.fit(x_train, y_train)\n\nplt.figure(figsize=(20,20))\nplot_tree(model,\n         feature_names=input_columns.columns,\n         class_names='class',\n          filled = True\n         )\nplt.savefig('./images/decision_tree.png')\nplt.show()\n","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'sklearn.tree._classes.DecisionTreeClassifier'>\n"},"1":{"data":{"image/png":"22f12361eef12813a690cc545ac06334b1708b4b","text/plain":"<Figure size 1440x1440 with 1 Axes>"},"exec_count":84,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":102,"type":"cell"}
{"cell_type":"code","exec_count":86,"id":"75b404","input":"fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(10,6))\nfig.suptitle('ROC Curve for Neural Network')\nplot_roc_curve(clf, x_test, y_test, ax=axes)\nplt.show()\nImage(filename = './images/roc_curve.png')","output":{"0":{"data":{"image/png":"f188333823b409e4571dd7a8275d6b542eaff7ac","text/plain":"<Figure size 720x432 with 1 Axes>"},"exec_count":86,"metadata":{"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"3963592485cb81526155a2b3c4b85e5b6b50c973","text/plain":"<IPython.core.display.Image object>"},"exec_count":86,"output_type":"execute_result"}},"pos":97,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"ffb65f","input":"df.replace('?', np.nan, inplace = True)","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"0438ac","input":"<u>**Hyper-parameters Tuning**</u>","pos":49,"type":"cell"}
{"cell_type":"markdown","id":"1506f5","input":"import statsmodels.api as sm\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import RidgeCV, LassoCV, Ridge, Lasso#Loading the dataset\n\nX = df[['cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor',\n       'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',\n       'stalk-shape', 'stalk-surface-above-ring',\n       'stalk-surface-below-ring', 'stalk-color-above-ring',\n       'stalk-color-below-ring', 'veil-color', 'ring-number',\n       'ring-type', 'spore-print-color', 'population', 'habitat']]\ncoef = pd.Series(my_KNN_model, index = X.columns)\nimp_coef = coef.sort_values()\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Feature importance using Lasso Model\")","pos":62,"type":"cell"}
{"cell_type":"markdown","id":"1510f9","input":"","pos":76,"type":"cell"}
{"cell_type":"markdown","id":"1de191","input":"<h2>\n    Neural Networks\n</h2>\n\n","pos":87,"type":"cell"}
{"cell_type":"markdown","id":"1ef4e6","input":"","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"2a9f87","input":"# Data Exploration","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"2b2a6f","input":"This is a correlation heatmap for our dataset, which measures the correlation among all the columns. As we take a look at the first row, it shows the correlation between our target variable 'class' and all other features. We find out the column 'gill-size' has the largest correlation with our target, as the correlation value reaches 0.54.","pos":42,"type":"cell"}
{"cell_type":"markdown","id":"2f91cb","input":"<u>**Data Splitting**</u>","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"3fe41b","input":"# Data Visualization\n\n","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"513ed0","input":"### decision tree\n\n","pos":101,"type":"cell"}
{"cell_type":"markdown","id":"6129cd","input":"# SVC\n\n","pos":65,"type":"cell"}
{"cell_type":"markdown","id":"7166cb","input":"<u>**Missing Value Analysis**</u>","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"723778","input":"# Data Preprocessing\n\n","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"790973","input":"# Data Cleaning\n\n","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"872fd9","input":"<u>**Scatter Plot Matrix**</u>: May show some sort of correlation\n\n","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"9e2eda","input":"<u>**Feature Encoding**</u>\n\n","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"ab0bf3","input":"## KNN","pos":47,"type":"cell"}
{"cell_type":"markdown","id":"ad0357","input":"<u>**User Input and Prediction**</u>\n\n","pos":63,"type":"cell"}
{"cell_type":"markdown","id":"b4b23e","input":"# Machine Learning Models","pos":46,"type":"cell"}
{"cell_type":"markdown","id":"bd23a3","input":"Column 'stalk-root' contains too many missing values, we decide to drop this column","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"c8e8e7","input":"<u>**Removal of Veil\\-Type**</u>\n","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"df731e","input":"<u>**Encode Labels**</u>","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"eef978","input":"<u>**Train, test and evaluate the best model**</u>","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"ef5b6f","input":"# Random Forest\n\n","pos":77,"type":"cell"}
{"cell_type":"raw","id":"461124","input":"Class:\np is poisonous = 1\ne is edible = 0\n                                                                                 we need to find the numeric values of these things\ncap-shape: bell=0,conical=c,convex=5,flat=f, knobbed=k,sunken=s\n\ncap-surface: fibrous=f,grooves=g,scaly=3,smooth=2\n\ncap-color: brown=4,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=9\n\nbruises: bruises=t,no=f\n\nodor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\ngill-attachment: attached=a,descending=d,free=f,notched=n\n\ngill-spacing: close=c,crowded=w,distant=d\n\ngill-size: broad=b,narrow=n\n\ngill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\nstalk-shape: enlarging=e,tapering=t\n\nstalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=? #Column dropped because 31% missing?\n\nstalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nstalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nveil-type: partial=p,universal=u #irrelevant\n\nveil-color: brown=n,orange=o,white=w,yellow=y\n\nring-number: none=n,one=o,two=t\n\nring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\nspore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\npopulation: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\nhabitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","pos":29,"type":"cell"}
{"id":0,"time":1657904721199,"type":"user"}
{"last_load":1657904572962,"type":"file"}